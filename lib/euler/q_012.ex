defmodule Euler.Q012 do
  @moduledoc """
  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
  ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred
  divisors?
  """

  @doc """
  Find the first triangle number to have > n divisors

  ## Examples

    iex> Euler.Q012.run 5
    28

    iex> Euler.Q012.run 50
    24976

    iex> Euler.Q012.run 500
    24976

  """
  @spec run(integer) :: integer
  def run(n) do
    triangles()
    |> Stream.take_while(&(divisors(&1) <= n))
    |> Enum.max
  end


  # count divisors
  # stop when divisors > n

  @doc """
  stream triangle numbers

  ## Examples

    iex> Euler.Q012.triangles |> Enum.take(5)
    [1, 3, 6, 10, 15]
  """
  def triangles do
    Stream.unfold({1, 2}, fn({n, i}) ->
      {n, {n + i, i + 1}}
    end)
  end

  @doc """
  count divisors of n

  https://stackoverflow.com/questions/11699324/algorithm-to-find-all-the-exact-divisors-of-a-given-integer

  ## Examples

    iex> Euler.Q012.divisors 10
    4

  """
  def divisors(n), do: do_divisors(n, :math.sqrt(n), 1, 0)

  # n - subject
  # i - number were testing against n
  # d - current divisor count
  defp do_divisors(_n, rtn, i, d) when i > rtn, do: d
  defp do_divisors(n, rtn, i, d) when rem(n, i) == 0, do: do_divisors(n, rtn, i + 1, d + 2)
  defp do_divisors(n, rtn, i, d), do: do_divisors(n, rtn, i + 1, d)
end
