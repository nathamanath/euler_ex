defmodule Euler.Q012 do
  @moduledoc """
  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
  ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred
  divisors?
  """

  @doc """
  Find the first triangle number to have > n divisors

  ## Examples

    iex> Euler.Q012.run 1
    3

    iex> Euler.Q012.run 2
    6

    iex> Euler.Q012.run 3
    6

    iex> Euler.Q012.run 4
    28

    iex> Euler.Q012.run 5
    28

  """
  @spec run(integer) :: integer
  def run(n) do
    triangles()
    |> Stream.take_while(&(divisors(&1) <= n + 1))
    |> Enum.max
  end

  @doc """
  stream of triangle numbers

  ## Examples

    iex> Euler.Q012.triangles |> Enum.take(7)
    [1, 3, 6, 10, 15, 21, 28]
  """
  def triangles do
    Stream.unfold({1, 2}, fn({n, i}) ->
      {n, {n + i, i + 1}}
    end)
  end

  @doc """
  count divisors of n

  optimised version based on this:
  https://stackoverflow.com/questions/11699324/algorithm-to-find-all-the-exact-divisors-of-a-given-integer

  ## Examples

    iex> Euler.Q012.divisors 28
    6

  """
  def divisors(n), do: do_divisors(n, :math.sqrt(n), 1, [])

  # n - subject
  # i - number were testing against n
  # d - current divisor count
  defp do_divisors(_n, rtn, i, divisors) when i > rtn, do: length divisors

  defp do_divisors(n, rtn, i, divisors) when rem(n, i) == 0 and i != n/i do
    do_divisors(n, rtn, i + 1, [i, n/i | divisors])
  end

  defp do_divisors(n, rtn, i, divisors) when rem(n, i) == 0 do
    do_divisors(n, rtn, i + 1, [i | divisors])
  end

  defp do_divisors(n, rtn, i, divisors), do: do_divisors(n, rtn, i + 1, divisors)

end
